#1:
#include <iostream>
using namespace std;
int f(int y)
{
    if (y < 0)
        throw y;
    return y / 2;
}
int f(int y, int z)
{
    if (y < z)
        throw z - y;
    return y / 2;
}
float f(int& y)
{
    cout <<" y este referinta";
    return (float)y / 2;
}
int main()
{
    int x;
    try {
        cout <<"Da - mi un numar par : ";
        cin >> x;
        if (x % 2)
            x = f(x, 0);
        else
            x = f(x);
        cout <<"Numarul "<< x <<" e bun !"<< endl;
    }
    catch (int i) {
        cout <<"Numarul "<< i <<" nu e bun !"<< endl;
    }
    return 0;
}


#2:
#include <iostream>
using namespace std;
class A {
    static int x;

public:
    A(int i = 0) { x = i; }
    int get_x() { return x; }
    int& set_x(int i) { x = i; }
    A operator=(A a1)
    {
        set_x(a1.get_x());
        return a1;
    }
};
int main()
{
    A a(212), b;
    cout << (b = a).get_x();
    return 0;
}


#4:
#include <iostream.h>
class problema {
    int i;

public:
    problema(int j = 5) { i = j; }
    void schimba() { i++; }
    void afiseaza() { cout << "starea curenta " << i << "\n"; }
};
problema mister1() { return problema(6); }
void mister2(problema& o)
{
    o.afiseaza();
    o.schimba();
    o.afiseaza();
}
int main()
{
    mister2(mister1());
    return 0;
}


#5:
//ordinea constructorilor
#include <iostream.h>
class B {
    int i;

public:
    B() { i = 1; }
    virtual int get_i() { return i; }
};
class D : virtual public B {
    int j;

public:
    D() { j = 2; }
    int get_i() { return B::get_i() + j; }
};
class D2 : virtual public B {
    int j2;

public:
    D2() { j2 = 3; }
    int get_i() { return B::get_i() + j2; }
};
class MM : public D, public D2 {
    int x;

public:
    MM() { x = D::get_i() + D2::get_i(); }
    int get_i() { return x; }
};
int main()
{
    B* o = new MM();
    cout << o->get_i() << "\n";
    MM* p = dynamic_cast<MM*>(o);
    if (p)
        cout << p->get_i() << "\n";
    D* p2 = dynamic_cast<D*>(o);
    if (p2)
        cout << p2->get_i() << "\n";
    return 0;
}


#6:
#include <iostream.h>
class B {
    int x;

public:
    B(int i = 7) { x = i; }
    int get_x() { return x; }
    operator int() { return x; }
};
class D : public B {
public:
    D(int i = -12)
        : B(i)
    {
    }
    D operator+(D a) { return get_x() + a.get_x() + 1; }
};
int main()
{
    D a;
    int b = 18;
    b += a;
    cout << b;
    return 0;
}


#7:
#include <iostream.h>
#include <typeinfo>
class B {
    int i;

public:
    B() { i = 1; }
    int get_i() { return i; }
};
class D : B {
    int j;

public:
    D() { j = 2; }
    int get_j() { return j; }
};
int main()
{
    B* p = new D;
    cout << p->get_i();
    if (typeid((B*)p).name() == "D*")
        cout << ((D*)p)->get_j();
    return 0;
}


#8:
#include <iostream.h>
class B {
protected:
    int x;

public:
    B(int i = 28) { x = i; }
    virtual B f(B ob) { return x + ob.x + 1; }
    void afisare() { cout << x; }
};
class D : public B {
public:
    D(int i = -32)
        : B(i)
    {
    }
    B f(B ob) { return x + ob.x - 1; }
};
int main()
{
    B *p1 = new D, *p2 = new B, *p3 = new B(p1->f(*p2));
    p3->afisare();
    return 0;
}


#9:
#include <iostream.h>
class B {
protected:
    static int x;
    int i;

public:
    B()
    {
        x++;
        i = 1;
    }
    ~B() { x--; }
    static int get_x() { return x; }
    int get_i() { return i; }
};
int B::x;
class D : public B {
public:
    D() { x++; }
    ~D() { x--; }
};
int f(B* q)
{
    return (q->get_x()) + 1;
}
int main()
{
    B* p = new B[10];
    cout << f(p);
    delete[] p;
    p = new D;
    cout << f(p);
    delete p;
    cout << D::get_x();
    return 0;
}


#10:
#include <iostream.h>
template <class T, class U>
T f(T x, U y)
{
    return x + y;
}
int f(int x, int y)
{
    return x - y;
}
int main()
{
    int *a = new int(3), b(23);
    cout << *f(a, b);
    return 0;
}


#11:
#include <iostream.h>
class A {
    int x;

public:
    A(int i = 0) { x = i; }
    A operator+(const A& a) { return x + a.x; }
    template <class T>
    ostream& operator<<(ostream&);
};
template <class T>
ostream& A::operator<<(ostream& o)
{
    o << x;
    return o;
}
int main()
{
    A a1(33), a2(-21);
    cout << a1 + a2;
    return 0;
}


#12:
#include <iostream.h>
class cls {
    int x;

public:
    cls(int i) { x = i; }
    int set_x(int i)
    {
        int y = x;
        x = i;
        return y;
    }
    int get_x() { return x; }
};
int main()
{
    cls* p = new cls[10];
    int i = 0;
    for (; i < 10; i++)
        p[i].set_x(i);
    for (i = 0; i < 10; i++)
        cout << p[i].get_x();
    return 0;
}


#13:
#include <iostream>
using namespace std;
int f(int y)
{
    try {
        if (y > 0)
            throw y;
    }
    catch (int i) {
        throw;
    }
    return y - 2;
}
int f(int y, int z)
{
    try {
        if (y < z)
            throw z - y;
    }
    catch (int i) {
        throw;
    }
    return y + 2;
}
float f(float& y)
{
    cout << " y este referinta";
    return (float)y / 2;
}
int main()
{
    int x;
    try {
        cout << "Da-mi un numar par: ";
        cin >> x;
        if (x % 2)
            x = f(x, 0);
        else
            x = f(x);
        cout << "Numarul " << x << " e bun!" << endl;
    }
    catch (int i) {
        cout << "Numarul " << i << " nu e bun!" << endl;
    }
    return 0;
}


#14:
#include <iostream>
using namespace std;
class A {
    int x;

public:
    A(int i) { x = i; }
    int get_x() { return x; }
    int& set_x(int i) { x = i; }
    A operator=(A a1)
    {
        set_x(a1.get_x());
        return a1;
    }
};
class B : public A {
    int y;

public:
    B(int i)
        : A(i)
    {
        y = i;
    }
    void afisare() { cout << y; }
};
int main()
{
    B a(112), b, *c;
    cout << (b = a).get_x();
    (c = &a)->afisare();
    return 0;
}


#16:
#include <iostream>
using namespace std;
class A {
protected:
    int x;

public:
    A(int i = 14) { x = i; }
};
class B : A {
public:
    B()
        : A(2)
    {
    }
    B(B& b) { x = b.x - 14; }
    void afisare() { cout << x; }
};
int main()
{
    B b1, b2(b1);
    b2.afisare();
    return 0;
}


#18:
#include <iostream>
using namespace std;
template <class T, class U>
T fun(T x, U y)
{
    return x + y;
}
int fun(int x, int y)
{
    return x - y;
}
int fun(int x)
{
    return x + 1;
}
int main()
{
    int *a = new int(10), b(5);
    cout << fun(a, b);
    return 0;
}


#20:
#include <iostream>
using namespace std;
struct B {
    int i;

public:
    B() { i = 1; }
    virtual int get_i() { return i; }
} a;
class D : virtual public B {
    int j;

public:
    D() { j = 2; }
    int get_i() { return B::get_i() + j; }
};
class D2 : virtual public B {
    int j2;

public:
    D2() { j2 = 3; }
    int get_i() { return B::get_i() + j2; }
};
class MM : public D2, public D {
    int x;

public:
    MM() { x = D::get_i() + D2::get_i(); }
    int get_i() { return x; }
};
{
    MM b;
}
int main()
{
    B* o = new MM();
    cout << o->get_i() << "\n";
    MM* p = dynamic_cast<MM*>(o);
    if (p)
        cout << p->get_i() << "\n";
    D* p2 = dynamic_cast<D*>(o);
    if (p2)
        cout << p2->get_i() << "\n";
    return 0;
}


#21:
#include <iostream>
using namespace std;
class A {
public:
    int x;
    A(int i = -13) { x = i; }
};
class B : virtual public A {
public:
    B(int i = -15) { x = i; }
};
class C : virtual public A {
public:
    C(int i = -17) { x = i; }
};
class D : virtual public A {
public:
    D(int i = -29) { x = i; }
};
class E : public B, public D, public C {
public:
    int y;
    E(int i, int j)
        : D(i)
        , B(j)
    {
        y = x + i + j;
    }
    E(E& ob) { y = ob.x - ob.y; }
};
int main()
{
    E e1(5, 10), e2 = e1;
    cout << e2.y;
    return 0;
}


#22:
#include <iostream>
#include <typeinfo>
using namespace std;
class B {
    int i;

public:
    B(int x) { i = x + 1; }
    int get_i() { return i; }
};
class D : public B {
    int j;

public:
    D()
        : B(1)
    {
        j = i + 2;
    }
    int get_j() { return j; }
};
int main()
{
    B* p = new D[10];
    cout << p->get_i();
    if (typeid((B*)p).name() == "D*")
        cout << ((D*)p)->get_j();
    return 0;
}


#23:
#include <iostream>
using namespace std;
class B {
protected:
    static int x;
    int i;

public:
    B()
    {
        x++;
        i = 1;
    }
    ~B() { x--; }
    static int get_x() { return x; }
    int get_i() { return i; }
};
int B::x;
class D : public B {
public:
    D()
    {
        x++;
        i++;
    }
    ~D()
    {
        x--;
        i--;
    }
    int f1(B o) { return 5 + get_i(); }
};
int f(B* q)
{
    return (q->get_x()) + 1;
}
int main()
{
    B* p = new B[10];
    cout << f(p);
    delete[] p;
    p = new D;
    cout << p->f1(p);
    delete p;
    cout << D::get_x();
    return 0;
}


#25:
#include <iostream.h>
class A {
    static int x;

public:
    A(int i = 0) { x = i; }
    int get_x() { return x; }
    int& set_x(int i) { x = i; }
    A operator=(A a1)
    {
        set_x(a1.get_x());
        return a1;
    }
};
int main()
{
    A a(212), b;
    cout << (b = a).get_x();
    return 0;
}


#26:
#include <iostream>
using namespace std;
class A {
protected:
    int x;

public:
    A(int i = 14) { x = i; }
};
class B : A {
public:
    B()
        : A(2)
    {
    }
    B(B& b) { x = b.x - 14; }
    void afisare() { cout << x; }
};
int main()
{
    B b1, b2(b1);
    b2.afisare();
    return 0;
}


#27:
#include <iostream.h>
class B {
    int i;

public:
    B() { i = 1; }
    virtual int get_i() { return i; }
};
class D : public B {
    int j;

public:
    D() { j = 2; }
    int get_i() { return B::get_i() + j; }
};
int main()
{
    const int i = cin.get();
    if (i % 3) {
        D o;
    }
    else {
        B o;
    }
    cout << o.get_i(); 
    return 0;
}


#28:
#include <iostream.h>
class problema {
    int i;

public:
    problema(int j = 5) { i = j; }
    void schimba() { i++; }
    void afiseaza() { cout << "starea curenta " << i << "\n"; }
};
problema mister1() { return problema(6); }
void mister2(problema& o)
{
    o.afiseaza();
    o.schimba();
    o.afiseaza();
}
int main()
{
    mister2(mister1());
    return 0;
}


#29:
#include <iostream.h>
class B {
    int i;

public:
    B() { i = 1; }
    virtual int get_i() { return i; }
};
class D : virtual public B {
    int j;

public:
    D() { j = 2; }
    int get_i() { return B::get_i() + j; }
};
class D2 : virtual public B {
    int j2;

public:
    D2() { j2 = 3; }
    int get_i() { return B::get_i() + j2; }
};
class MM : public D, public D2 {
    int x;

public:
    MM() { x = D::get_i() + D2::get_i(); }
    int get_i() { return x; }
};
int main()
{
    B* o = new MM();
    cout << o->get_i() << "\n";
    MM* p = dynamic_cast<MM*>(o);
    if (p)
        cout << p->get_i() << "\n";
    D* p2 = dynamic_cast<D*>(o);
    if (p2)
        cout << p2->get_i() << "\n";
    return 0;
}


#30:
#include <iostream.h>
class B {
    int x;

public:
    B(int i = 7) { x = i; }
    int get_x() { return x; }
    operator int() { return x; }
};
class D : public B {
public:
    D(int i = -12)
        : B(i)
    {
    }
    D operator+(D a) { return get_x() + a.get_x() + 1; }
};
int main()
{
    D a;
    int b = 18;
    b += a;
    cout << b;
    return 0;
}


#31:
#include <iostream>
#include <typeinfo>
using namespace std;

class B {
    int i;

public:
    B() { i = 1; }
    int get_i() { return i; }
};
class D : B {
    int j;

public:
    D() { j = 2; }
    int get_j() { return j; }
};
int main()
{
    B* p = new D;
    cout << p->get_i();
    if (typeid((B*)p).name() == "D*")
        cout << ((D*)p)->get_j();
    return 0;
}


#32:
#include <iostream.h>
class B {
protected:
    int x;

public:
    B(int i = 28) { x = i; }
    virtual B f(B ob) { return x + ob.x + 1; }
    void afisare() { cout << x; }
};
class D : public B {
public:
    D(int i = -32)
        : B(i)
    {
    }
    B f(B ob) { return x + ob.x - 1; }
};
int main()
{
    B *p1 = new D, *p2 = new B, *p3 = new B(p1->f(*p2));
    p3->afisare();
    return 0;
}


#33:
#include <iostream.h>
class B {
protected:
    static int x;
    int i;

public:
    B()
    {
        x++;
        i = 1;
    }
    ~B() { x--; }
    static int get_x() { return x; }
    int get_i() { return i; }
};
int B::x;
class D : public B {
public:
    D() { x++; }
    ~D() { x--; }
};
int f(B* q)
{
    return (q->get_x()) + 1;
}
int main()
{
    B* p = new B[10];
    cout << f(p);
    delete[] p;
    p = new D;
    cout << f(p);
    delete p;
    cout << D::get_x();
    return 0;
}


#34:
#include <iostream.h>
template <class T, class U>
T f(T x, U y)
{
    return x + y;
}
int f(int x, int y)
{
    return x - y;
}
int main()
{
    int *a = new int(3), b(23);
    cout << *f(a, b);
    return 0;
}


#35:
#include <iostream.h>
class A {
    int x;

public:
    A(int i = 0) { x = i; }
    A operator+(const A& a) { return x + a.x; }
    template <class T>
    ostream& operator<<(ostream&);
};
template <class T>
ostream& A::operator<<(ostream& o)
{
    o << x;
    return o;
}
int main()
{
    A a1(33), a2(-21);
    cout << a1 + a2;
    return 0;
}


#36:
#include <iostream.h>
class cls {
    int x;

public:
    cls(int i) { x = i; }
    int set_x(int i)
    {
        int y = x;
        x = i;
        return y;
    }
    int get_x() { return x; }
};
int main()
{
    cls* p = new cls[10];
    int i = 0;
    for (; i < 10; i++)
        p[i].set_x(i);
    for (i = 0; i < 10; i++)
        cout << p[i].get_x();
    return 0;
}


#37:
#include<iostream>
using namespace std;
class A
{
    int i;
    protected: static int x;
    public: A(int j=7) {i=j;x=j;}
    int get_x() {return x;}
    int set_x(int j) {int y=x; x=j; return y;}
    A operator=(A a1) {set_x(a1.get_x()); return a1;}
};
int A::x=15;
int main()
{
    A a(212),b;
    cout<<(b=a).get_x();
    return 0;
}


#38:
#include<iostream>
using namespace std;
template<class X, class Y>
X f(X x, Y y)
{
    return x+y;
}
int *f(int *x,int y)
{
    return x-y;
}
int main()
{
    int *a=new int(200), *b=a;
    //cout<<a+b<<"\n"; nu poti aduna pointeri
    cout<<*f(a,b);
    return 0;
}


#39:
#include<iostream>
using namespace std;
template<class X>void test(X &a, X &b)
{
    X temp;
    temp=a;
    a=b;
    b=temp;
    cout<<"ttest\n";
}
void test(int &c,int &d)
{
    int temp;
    temp=c;
    c=d;
    d=temp;
    cout<<"test 1\n";
}
void test(int e,int f)
{
    int temp;
    temp=e;
    e=f;
    f=temp;
    cout<<"test 2\n";
}
void test(int g,int *h)
{
    int temp;
    temp=g;
    g=*h;
    *h=temp;
    cout<<"test 3\n";
}
int main()
{
    int a=5,b=15,c=25,*d=&a;
    test(a,b);
    test(c,d);
    return 0;
}


#40:
#include<iostream>
using namespace std;
class A
{
    int valoare;
    public: A(int param1=3):valoare(param1){}
    int getValoare(){return this->valoare;}
};
int main()
{
    A vector[]={*(new A(3)),*(new A(4)),*(new A(5)),*(new A(6)) };
    cout<<vector[2].getValoare();
    return 0;
}


#41:
#include<iostream>
using namespace std;
int f(int y)
{
    if(y<0) throw y;
    return y/2;
}
int main()
{
    int x;
    try
    {
        cout<<"Da-mi un numar par: ";
        cin>>x;
        if(x%3)x=f(x);
        else throw x;
        cout<<"Numarul "<<x<<" e bun!\n";
    }
    catch(int i)
    {
        cout<<"Numarul "<<i<<" nu e bun!\n";
    }
    return 0;
}


#42:
#include<iostream>
using namespace std;
class A
{
    int i;
    public: A() {i=1;}
    virtual int get_i() {return i;}
};
class B: public A
{
    int j;
    public: B() {j=2;}
    int get_i() { return A::get_i()+j;}
};
int main()
{
    const int i=cin.get();
    if(i%3) {A o;}
    else {B o;}
    cout<<o.get_i();
    return 0;
}


#43:
#include<iostream>
using namespace std;
class cls
{
    int x;
public:
        cls(int i=0) {cout<<" c1 "; x=i;}
        ~cls() {cout<<" d 1 ";}
};
class cls1
{
    int x; cls xx;
public:
        cls1(int i=0){cout<<" c2 ";x=i;}
        ~cls1(){cout<<" d2 ";}
}c;
class cls2
{
    int x;cls1 xx;cls xxx;
public:
    cls2(int i=0) {cout<<" c3 ";x=i;}
    ~cls2(){ cout<<" d3 ";}
};
int main()
{
    cls2 s;
    return 0;
}


#44:
#include<iostream>
#include<typeinfo>
using namespace std;
class B
{
    int i;
public:
    B() { i=1;}
    int get_i() {return i;}
};
class D: public B
{
    int j;
public:
    D() {j=2;}
    int get_j(){return j;}
};
int main()
{
    B *p=new D;
    cout<<p->get_i();
    if(typeid((B*)p).name()=="D*") cout<<((D*)p)->get_j();
    return 0;
}


#45:
#include<iostream>
using namespace std;
class cls
{
    int x;
public: cls(int i=3) {x=i;}
    int &f() const{ return x;}
};
int main()
{
    const cls a(-3);
    int b=a.f();
    cout<<b;
    return 0;
}


#46:
#include<iostream>
using namespace std;
class B
{
    protected: int x;
    public: B(int i=0) {x=i;}
    virtual B minus() {return (1-x);}
};
class D: public B
{
    public: D(int i=0):B(i) {}
    void afisare() {cout<<x;}
};
int main()
{
    D *p1=new D(18);
    *p1=p1->minus();
    p1->afisare();
    return 0;
}


#47:
#include <iostream>
using namespace std;
class cls1 {
  int x;
public:
  cls1 () {
    x = 13;
  }
  int g() {
    static int i; i++; 
    return (i+x);
  }
};

class cls2 {
  int x;
public:
  cls2() {
    x = 27;
  }
  cls1& f() {
     cls1 ob; return ob;
  }
};

int main() {
  cls2 ob;
  cout << ob.f().g();
  return 0;
}


#48:
#include <iostream>
using namespace std;
class cls1
{ protected: int x;
public:    cls1(int i=10) { x=i; }
 int get_x() { return x;} };
class cls2: cls1
{ public: cls2(int i):cls1(i) {} }; int main()
{ cls2 d(37);
 cout<<d.get_x();
 return 0; }


#49:
#include <iostream.h> 
class cls
{ int x;
   public: cls(int y) {x=y; }
     friend int operator*(cls a,cls b){return (a.x*b.x); } };
int main()
{ cls m(100),n(15);
 cout << m*n;
return 0; }


#51:
#include <iostream>
#include <typeinfo>
using namespace std;

class B
{ int i;
  public: B() { i=1; }
          int get_i() { return i; }
};
class D: public B
{ int j;
  public: D() { j=2; }
          int get_j() {return j; }
};
int main()
{ B *p=new D;
  cout<<p->get_i();
  if (typeid((B*)p).name()=="B") cout<<((D*)p)->get_j();
  return 0;
}


#52:
#include <iostream.h>
class B
{ protected: static int x;
             int i;
  public: B() { x++; i=1; }
          ~B() { x--; cout << "b";}
          int get_x() { return x; }
          int get_i() { return i; } };
int B::x;
class D: public B
{ public: D() { x++; }
          ~D() { x--; cout << "d";} };
int f(B *q)
{ return (q->get_x())+1; }
int main()
{ B *p=new B[10];
  cout<<f(p);
  delete[] p;
  p=new D;
  cout<<f(p);
  delete p;
  
  cout<<D::get_x();
  return 0;
}


#53:
#include <iostream.h>
class cls
{ int x;
  public: cls(int i) { x=i; }
  int set_x(int i) { int y=x; x=i; return y; }
  int get_x(){ return x; } };
int main()
{ cls *p=new cls[10];
  int i=0;
  for(;i<10;i++) p[i].set_x(i);
  for(i=0;i<10;i++) cout<<p[i].get_x();
  return 0;
}


#56:
#include <iostream>
using namespace std;
class cls1 {
  int x;
public:
  cls1 () {
    x = 13;
  }
  int g() {
    static int i; i++; 
    return (i+x);
  }
};

class cls2 {
  int x;
public:
  cls2() {
    x = 27;
  }
  cls1& f() {
     cls1 ob; return ob;
  }
};

int main() {
  cls2 ob;
  cout << ob.f().g();
  return 0;
}


#57:
#include <iostream.h>

class D;

class B {
    int x;
    friend void f(B, D);

public:
    B(int i = 0) { x = i; }
};

class D : public B {
public:
    int y;
    D(int i = 0, int j = 0)
        : B(i)
    {
        y = j;
    }
};

void f(B b, D d) { cout << b.x << " " << d.y; }

void main()
{
    B b;
    D d;
    f(b, d);
}


#58:
#include <iostream.h>

class D;

class B {
    int x;
    friend void f(B, D);

public:
    B(int i = 0) { x = i; }
};

class D : public B {
public:
    int y;
    D(int i = 0, int j = 0)
        : B(i)
    {
        y = j;
    }
};

void f(B b, D d) { cout << b.x << " " << d.y; }

void main()
{
    B b;
    D d;
    f(b, d);
}


#59:
#include <iostream.h>

class B {
    int x;

public:
    B(int v) { v = x; }
    int get_x() { return x; }
};

class D : private B {
    int y;

public:
    D(int v)
        : B(v)
    {
    }
    int get_x() { return x; }
};

void main()
{
    D d(10);
    cout << d.get_x();
}


#60:
#include <iostream.h>

class cls {
public:
    float sa;
    cls(float s = 0) { sa = s; }
    operator float() { return sa; }
    float f(float c) { return (sa * (1 + c / 100)); }
};

void main()
{
    cls p(100);
    cout << p.f(p);
}


#61:
#include <iostream.h>

class cls {
    int vi;

public:
    cls(int v = 18) { vi = v; }
    operator int() { return vi; }
    cls operator++()
    {
        vi++;
        return *this;
    }
    cls operator++(int);
};

cls cls::operator++(int)
{
    cls aux = *this;
    vi++;
    return aux;
}

void main()
{
    cls p(20);
    int x = p++, y = ++p;
    cout << "x=" << x << ", y=" << y << endl;
}


#62:
#include <iostream.h>

class cls {
    int vi;

public:
    cls(int v = 18) { vi = v; }
    operator int() { return vi; }
    cls operator++()
    {
        vi++;
        return *this;
    }
    cls operator++(int);
};

cls cls::operator++(int)
{
    cls aux = *this;
    vi++;
    return aux;
}

void main()
{
    cls p(20);
    int x = p++, y = ++p;
    cout << "x=" << x << ", y=" << y << endl;
}


#63:
include<iostream.h>

    class cls {
public:
    int x;
    cls() { x = 3; }
    void f(cls& c) { cout << c.x; }
};

void main()
{
    const cls d;
    f(d);
}


#64:
#include <iostream.h>

class cls {
public:
    int x, y;
    cls(int i = 0, int j = 0)
    {
        x = i;
        y = j;
    }
};

void main()
{
    cls a, b, c[3] = { cls(1, 1), cls(2, 2), a };
    cout << c[2].x;
}


#65:
#include <iostream.h>

class vector {
    int *p, nr;

public:
    operator int() { return nr; }
    vector(int);
};

vector::vector(int n)
{
    p = new int[n];
    nr = n;
    while (n--)
        p[n] = n;
}

void f(int i)
{
    while (i--)
        cout << i << endl;
}

void main()
{
    vector x(10);
    f(x);
}


#67:
#include <iostream.h>

class Y;

class Z;

class X {
    int x;

public:
    X(int n = 0) { x = n; }
    friend Y;
};

class Y {
    int y;
    friend Z;
};

class Z {
public:
    void f(X u) { cout << u.x; }
};

void main()
{
    X a;
    Z b;
    b.f(a);
}


#68:
#include <iostream.h>

class cls2;

class cls1 {
public:
    int vi;
    cls1(int v = 30) { vi = v; }
    cls1(cls2 p) { vi = p.vi; }
};

class cls2 {
public:
    int vi;
    cls2(int v = 20) { vi = v; }
};

cls1 f(cls1 p)
{
    p.vi++;
    return p;
}

void main()
{
    cls1 p;
    f(p);
    cout << endl
         << p.vi;
    cls2 r;
    f(r);
    cout << endl
         << r.vi;
}


#70:
#include <iostream.h>
class cls1 {
protected:
    int x;

public:
    cls1() { x = 13; }
};
class cls2 : public cls1 {
    int y;

public:
    cls2() { y = 15; }
    int f(cls2 ob) { return (ob.x + ob.y); }
};
int main()
{
    cls2 ob;
    cout << ob.f(ob);
    return 0;
}


#71:
#include <iostream.h>
class cls1 {
    int x;

public:
    cls1() { x = 13; }
    int g()
    {
        static int i;
        i++;
        return (i + x);
    }
};
class cls2 {
    int x;

public:
    cls2() { x = 27; }
    cls1& f()
    {
        static cls1 ob;
        return ob;
    }
};
int main()
{
    cls2 ob;
    cout << ob.f().g();
    return 0;
}


#72:
#include <iostream.h>
class cls1 {
protected:
    int x;

public:
    cls1(int i = 10) { x = i; }
    int get_x() { return x; }
};
class cls2 : cls1 {
public:
    cls2(int i)
        : cls1(i)
    {
    }
};
int main()
{
    cls d(37);
    cout << d.get_x();
    return 0;
} 


#73:
#include <iostream>
using namespace std;

class B {
public:
 int x;
 B(int i = 16) { x = i; }
 B(){}
 B f(B ob) { return x + ob.x; }
};
class D : public B {
public:
 D(int i = 25) { x = i; }
 B f(B ob) { return x + ob.x + 1; }
 void afisare() { cout << x; }
};
int main()
{
 B *p1 = new D, *p2 = new B, *p3 = new B(p1->f(*p2));
 cout << p3->x;
 return 0;
}


#74:
#include <iostream.h>
class cls {
    int vi;

public:
    cls(int v = 37) { vi = v; }
    friend int& f(cls);
};
int& f(cls c) { return c.vi; }
int main()
{
    const cls d(15);
    f(d) = 8;
    cout << f(d);
    return 0;
}


#75:
#include <iostream.h>
class cls1 {
public:
    int x;
    cls1(int i = 20) { x = i; }
};
class cls2 {
public:
    int y;
    cls2(int i = 30) { y = i; }
    operator cls1()
    {
        cls1 ob;
        ob.x = y;
        return ob;
    }
};
cls1 f(cls1 ob)
{
    ob.x++;
    return ob;
}
int main()
{
    cls1 ob1;
    f(ob1);
    cout << ob1.x;
    cls2 ob2;
    f(ob2);
    cout << ob2.y;
    return 0;
}


#76:
#include <iostream.h>
class cls {
    int x;

public:
    cls(int i = 25) { x = i; }
    int f();
};
int cls::f() { return x; }
int main()
{
    const cls d(15);
    cout << d.f();
    return 0;
}


#77:
#include <iostream.h>
template <class tip>
tip dif(tip x, tip y)
{
    return x - y;
}
unsigned dif(unsigned x, unsigned y)
{
    return x >= y ? x - y : y - x;
}
int main()
{
    unsigned i = 7, j = 8;
    cout << dif(i, j);
    return 0;
}


#78:



#79:
#include <iostream.h>
class B {
    int x;

public:
    B(int i = 2)
        : x(i)
    {
    }
    int get_x() const { return x; }
};
class D : public B {
    int* y;

public:
    D(int i = 2)
        : B(i)
    {
        y = new int[i];
        for (int j = 0; j < i; j++)
            y[j] = 1;
    }
    D(D& a)
    {
        y = new int[a.get_x()];
        for (int i = 0; i < a.get_x(); i++)
            y[i] = a[i];
    }
    int& operator[](int i) { return y[i]; }
};
ostream& operator<<(ostream& o, const D& a)
{
    for (int i = 0; i < a.get_x(); i++)
        o << a[i];
    return o;
}
int main()
{
    D ob(5);
    cout << ob;
    return 0;
}


#80:
#include <iostream.h>
class B {
    int x;

public:
    B(int i = 10) { x = i; }
    int get_x() { return x; }
};
class D : public B {
public:
    D(int i)
        : B(i)
    {
    }
    D operator+(const D& a) { return x + a.x; }
};
int main()
{
    D ob1(7), ob2(-12);
    cout << (ob1 + ob2).get_x();
    return 0;
}


#81:
#include <iostream.h>
class B {
public:
    int x;
    B(int i = 16) { x = i; }
    B f(B ob) { return x + ob.x; }
};
class D : public B {
public:
    D(int i = 25) { x = i; }
    B f(B ob) { return x + ob.x + 1; }
    void afisare() { cout << x; }
};
int main()
{
    B *p1 = new D, *p2 = new B, *p3 = new B(p1->f(*p2));
    cout << p3->x;
    return 0;
}


#82:
#include <iostream.h>
class cls {
    int *v, nr;

public:
    cls(int i)
    {
        nr = i;
        v = new int[i];
        for (int j = 1; j < nr; j++)
            v[j] = 0;
    }
    int size() { return nr; }
    int& operator[](int i) { return *(v + i); }
};
int main()
{
    cls x(10);
    x[4] = -15;
    for (int i = 0; i < x.size(); i++)
        cout << x[i];
    return 0;
}


#83:
#include <iostream.h>
class cls {
    int x;

public:
    cls(int i = -20) { x = i; }
    const int& f() { return x; }
};
int main()
{
    cls a(14);
    int b = a.f()++;
    cout << b;
    return 0;
}


#84:
#include <iostream.h>
class B {
    static int x;
    int i;

public:
    B()
    {
        x++;
        i = 1;
    }
    ~B() { x--; }
    static int get_x() { return x; }
    int get_i() { return i; }
};
int B::x;
class D : public B {
public:
    D() { x++; }
    ~D() { x--; }
};
int f(B* q)
{
    return (q->get_i()) + 1;
}
int main()
{
    B* p = new B;
    cout << f(p);
    delete p;
    p = new D;
    cout << f(p);
    delete p;
    cout << D::get_x();
    return 0;
}


#85:
#include <iostream.h>
class B {
    int x;

public:
    B(int i = 17) { x = i; }
    int get_x() { return x; }
    operator int() { return x; }
};
class D : public B {
public:
    D(int i = -16)
        : B(i)
    {
    }
};
int main()
{
    D a;
    cout << 27 + a;
    return 0;
}


#86:
#include <iostream.h>
class cls {
    static int x;

public:
    cls(int i = 1) { x = i; }
    cls f(cls a) { return x + a.x; }
    static int g() { return f() / 2; }
};
int cls::x = 7;
int main()
{
    cls ob;
    cout << cls::g();
    return 0;
}


#87:
#include <iostream.h>
class cls {
    int *v, nr;

public:
    cls(int i = 0)
    {
        nr = i;
        v = new int[i];
        for (int j = 0; j < size(); j++)
            v[j] = 3 * j;
    }
    ~cls() { delete[] v; }
    int size() { return nr; }
    int& operator[](int i) { return v[i]; }
    cls operator+(cls);
};
cls cls::operator+(cls y)
{
    cls x(size());
    for (int i = 0; i < size(); i++)
        x[i] = v[i] + y[i];
    return x;
}
int main()
{
    cls x(10), y = x, z;
    x[3] = y[6] = -15;
    z = x + y;
    for (int i = 0; i < x.size(); i++)
        cout << z[i];
    return 0;
}


#88:
#include <iostream.h>
class B {
    int i;

public:
    B() { i = 1; }
    int get_i() { return i; }
};
class D : public B {
    int j;

public:
    D() { j = 2; }
    int get_j() { return j; }
};
int main()
{
    B* p;
    int x = 0;
    if (x)
        p = new B;
    else
        p = new D;
    if (typeid(p).name() == "D*")
        cout << ((D*)p)->get_j();
    return 0;
}


#89:
#include <iostream.h>
class cls {
    int x;

public:
    cls(int i) { x = i; }
    int set_x(int i)
    {
        int y = x;
        x = i;
        return y;
    }
    int get_x() { return x; }
};
int main()
{
    cls* p = new cls[10];
    int i = 0;
    for (; i < 10; i++)
        p[i].set_x(i);
    for (i = 0; i < 10; i++)
        cout << p[i].get_x(i);
    return 0;
}


#90:
#include <iostream.h>
template <class T>
int f(T x, T y)
{
    return x + y;
}
int f(int x, int y)
{
    return x - y;
}
int main()
{
    int a = 5;
    float b = 8.6;
    cout << f(a, b);
    return 0;
}


#91:
#include <iostream>
using namespace std;

class A
{
 int x;
public:
 A(int i = 25) { x = i; }
 int& f() const { return x; }
};
int main()
{
 A ob(5);
 cout << ob.f();
 return 0;
}


#92:
#include <iostream>
using namespace std;

class A
{
 int x;
public:
 A(int i):x(i){}
 int get_x() const { return x; }
};
class B : public A
{
 int *y;
public:
 B(int i) :A(i)
 {
  y = new int[i];
  for (int j = 0; j < i; j++) y[j] = 1;
 }
 B(B&);
 int &operator[](int i) { return y[i]; }
};
B::B(B& a)
{
 y = new int[a.get_x()]; 
 for (int i = 0; i < a.get_x(); i++) y[i] = a[i];
}
ostream &operator<<(ostream& o, B a)
{
 for (int i = 0; i < a.get_x(); i++)o << a[i];
 return o;
}
int main()
{
 B b(5);
 cout << b;
 return 0;
}


#93:
#include <iostream>
#include <typeinfo>
using namespace std;

class A
{
 int i;
public: A() { i = 1; }
  int get_i() { return i; }
};
class B: public A
{
 int j;
public: B() { j = 2; }
  int get_j() { return j; }
};
int main()
{
 A *p;
 int x = 0;
 if (x) p = new A;
 else p = new B;
 if (typeid(p).name() == typeid(B*).name()) cout << ((B*)p)->get_j();
 else cout << "tipuri diferite";
 return 0;
}


#94:
#include <iostream>
using namespace std;

class A
{
 int x;
public: A(int i = 17) { x = i; }
  int get_x() { return x; }
};
class B
{
 int x;
public: B(int i = -16) { x = i; }
  operator A() { return x; }
  int get_x() { return x; }
};
int main()
{
 B a;
 A b = a;
 cout << b.get_x();
 return 0;
}


#95:



#96:
#include <iostream>
using namespace std;

class A
{
protected: int x;
public: A(int i = -16) { x = i; }
  virtual A f(A a) { return x + a.x; }
  void afisare() { cout << x; }
};
class B: public A
{
public: B(int i=3):A(i){}
  A f(A a) { return x + a.x + 1; }
};
int main()
{
 A *p1 = new B, *p2 = new A, *p3 = new A(p1->f(*p2));
 p3->afisare();
 return 0;
}


#97:
#include <iostream>
using namespace std;

class A
{
protected: int x;
public: A(int i = -16) { x = i; }
  virtual A f(A a) { return x + a.x; }
  void afisare() { cout << x; }
};
class B: public A
{
public: B(int i=3):A(i){}
  A f(A a) { return x + 1; }
  B operator+ (B a) { return x + a.x; }
};
int main()
{
 B a; int b = -21;
 a += b;
 cout << b;
 return 0;

}


#98:
#include <iostream>
using namespace std;

class A {
    int x;

public:
    A(int i = 2)
        : x(i)
    {
    }
    int get_x() const { return x; }
};
class B : public A {

    int* y;

public:
    B(int i = 2)
        : A(i)
    {
        y = new int[i];
        for (int j = 0; j < i; j++)
            y[j] = 1;
    }
    B(B& b)
    {
        y = new int[b.get_x()];
        for (int i = 0; i < b.get_x(); i++)
            y[i] = b[i];
    }
    int& operator[](int i) const { return y[i]; }
};
ostream& operator<<(ostream& o, const B b)
{
    for (int i = 0; i < b.get_x(); i++)
        o << b[i];
    return o;
}



int main()
{
    const B b(5);
    cout << b;
    return 0;
}


#99:
#include <iostream>
using namespace std;
class A
{   protected: static int x;
    private: int y;
    public: A(int i) { x=i; y=-i+4; }
        int put_x(A a) { return a.x+a.y; } };
int A::x=7;
int main()
{   A a(10);
cout<<a.put_x(20);
    return 0;
}


#100:
#include <iostream>
using namespace std;
class A
{ int x;
  static int y;
public: A(int i,int j):x(i),y(j){}
 int f() const;};
int A::y;
int A::f() const {return y;}
int main()
{ const A a(21,2);
  cout<<a.f();
return 0;
}


#102:
#include<iostream>
using namespace std;
template<class X>
int functie(X x, X y)
{ return x+y;
}
int functie(int & x, int *y)
{ return x-*y;
}
int main()
{ int a=7, *b=new int(4);
  cout<<functie(a,b);
  return 0;
}


#103:
#include <iostream>
using namespace std;
class B
{ int i;
  public: B() { i=80; }
          virtual int get_i() { return i; }
};
class D: public B
{ int j;
  public: D() { j=27; }
          int get_j() {return j; }
};
int main()
{ D *p=new B;
  cout<<p->get_i();
  cout<<((D*)p)->get_j();
  return 0;
}


#104:
#include <iostream>
using namespace std;
class B
{ protected: int i;
  public: B(int j=5) {cout << " cb "; i=j-2; }
          ~B(){ cout << " db ";}
          int get_i() { return i; } };

class D1: public B
{ int j;
  public: D1(int k=10) {cout << " cd1 "; j=i-k+3; }
          ~D1(){ cout << " dd1 ";} };

 class D2: public D1
{ int k;
  public: D2(int l=15) {cout << " cd2 "; k=i-l+3; }
           ~D2(){ cout << " dd2 ";}  };
D1 f(D1 d1, D2 d2) {return d1.get_i()+d2.get_i(); }
int main()
{ D2 ob2; D1 ob1(3);
  cout<<f(ob1,ob2).get_i()+ob2.get_i();
  return 0;
}


#105:
#include <iostream>
using namespace std;
class A
{   static int *x;
    public: A() {}
            int get_x() { return (++(*x))++; } };
int *A::x(new int(19));
int main()
{   A *p=new A,b;
    cout<<b.get_x()<<" ";
    cout<<p->get_x();
    return 0;
}


#107:
include <iostream>
using namespace std;
class A
{   protected: int x;
    public: A(int i):x(i){}
            int get_x(){ return x; } };
class B: A
{   protected: int y;
    public: B(int i,int j):y(i),A(j){}
            int get_y(){ return get_x()+y; } };
class C: protected B
{   protected: int z;
    public: C(int i,int j,int k):z(i),B(j,k){}
            int get_z(){ return get_x()+get_y()+z; } };
int main()
{   C c(5,6,7);
    cout<<c.get_z();
    return 0;
}


#108:
#include <iostream>
using namespace std;
class cls
{ int x;
public: cls(int i=2) { x=i; }
int set_x(int i) { int y=x; x=i; return y; }
int get_x(){ return x; } };
int main()
{ cls *p=new cls[15];
      for(int i=2;i<8;i++) p[i].set_x(i);
   for(int i=1;i<6;i++) cout<<p[i].get_x();
  return 0;
}


#109:
#include <iostream>
using namespace std;
struct X {   int i;
public:   X(int ii ) { i = ii; };
     int f1() { return i; }
X f2() const {   int i=this->f1(); return X(34-i); }};
const X f3() {   return X(16); }
int f4(const X& x) { return x.f1(); }
int main() {X ob(11);
    cout<<f4(ob.f2().f1());
    return 0;
}


#110:
#include <iostream>
using namespace std;
class A
{ protected: static int x;
  public: A(int i=1) {x=i; }
  int get_x() { return x; }
  int& set_x(int i) { int y=x; x=i; return y;}
  A operator=(A a1) { set_x(a1.get_x()); return a1;}
} a(33);
int main()
{ A a(18), b(7);
  cout<<(b=a).set_x(27);
  return 0;
}


#111:
#include <iostream>
using namespace std;

class B {
public:
 int x;
 B(int i = 16) { x = i; }
 B f(B ob) { return x + ob.x; }
};
class D : public B {
public:
 D(int i = 25) { x = i; }
 D f(D ob) { return x + ob.x + 1; }
 void afisare() { cout << x; }
};
int main()
{
 D *p1 = new D, *p2 = new B, *p3 = new D(p1->f(*p2));
 cout << p3->x;
 return 0;
}


#112:
#include <iostream.h>
class cls {
    int x;

public:
    cls(int y) { x = y; }
    int operator*(cls a, cls b) { return (a.x * b.x); }
};
int main()
{
    cls m(100), n(15);
    cout << m * n;
    return 0;
}


